{"posts":[{"title":"集群架构学习","text":"综合架构项目，包括各种服务以及集群搭建 host 解析 123456789101112cat &gt;&gt;/etc/hosts &lt;&lt;EOF172.16.1.5 lb01172.16.1.6 lb01172.16.1.7 web01172.16.1.8 web02172.16.1.9 web03172.16.1.10 web04172.16.1.31 nfs01172.16.1.41 backup172.16.1.51 db01172.16.1.61 m01EOF 综合架构什么是综合架构 要求 综合架构集群架构 综合架构技术栈 什么是综合架构 一般架构通用的结构，这就是综合架构 综合架构也是一个参考，每个公司都有自己的特别的架构或需求 新的要求 第一阶段-运维基操，故障及故障提示，知识点 简书-[故障集合]Linux必备故障及原因50个 第二阶段-网站集群架构，遇到故障提示尝试解决 综合架构详解 分别通过开发，用户，运维角度分析网站架构 角度 说明 相关操作 开发角度 主要关注书写代码，这些代码需要服务器服务运行 存放代码，开发如何提交运维，运维如何部署，如何测试代码 用户角度 app 或浏览器访问网站，整个访问流程中涉及的服务功能 整个网站架构的核心 运维角度 如何快速部署，自动化部署，自动话监控 如何自动化维护，监控，故障修复 开发角度架构 dev-&gt; 代码存放(git\\github\\gitee\\gitlab)-&gt;测试环境（Jenkins/Sonarqube）-&gt;发布网站 用户角度架构 user-&gt;DNS-&gt;互联网-&gt;CDN-&gt;防火墙(80\\443)-&gt;网 技术栈 角度 功能 服务 开发角度 存放代码 Gitlab，Gogs，Github，Gitee 集成，发布 Jenkins 代码检查 Sonarqube 私服，软件包仓库（JAVA） Nexus 用户角度 DNS解析 DNS云解析（阿里），Bind9，DNSmasq，CoreDNs CDN缓存 各种厂商CDN服务阿里，蓝汛，七牛 防火墙 硬件防火墙：深信服，华为，奇安信 软件防火墙：firewalld，iptables公有云：安全组，态势感知，云安全中心 负载均衡 硬件：F5，软件：nginx（tengine，openResty），haproxy，lvs公有云： web网站服务器 基本：nginx，tengine，openResty架构：LNMP（PHP）：Linux，Nginx，MySQL，PHPLNMT（JAVA）：Linux，Nginx，MySQL，TomcatLNMP（Python）：Linux，Nginx，MySQL，PythonLNMG（Go）：Linux，Nginx，MySQL，Go 缓存服务器 Redis，Kafka，xxxMQ 数据库服务器 MySQL，Oracle国产：TiDB，openGauess,OceanBase 存储 硬件存储软件存储：== NFS ==，分布式存储对象存储：阿里OSS，七牛云对象存储，腾讯OSS 运维角度 VPN 硬件：开源OpenVPN 堡垒机 开源：Teleport，Jumpserver商业：硬件，软件 批量管理 Ansible 监控 Zabbix，Grafana，Prometheus 日志收集 Elastic Stack（ELK，EFK，EBLK,ElasticSearch,Filebeat,Logstash,Kibana) 审计 SQL审计，Yearning，Archery 安全 商业：AppScan，Nessus，开源：ClamAV 1.备份服务 备份服务：需要使用脚本，打包备份，定时任务 rsyncd服务，不同主机之间传输 特点： rsync是一个服务也是命令 使用方便，有多种模式 增量传输 1234#将backup的 /etc目录传输到 nfs的tmp下 scp -r /etc/sysconfig/ root@10.0.0.31:/tmp/ #-r 传输文件夹 reync参数选项 参数 说明 -a -r递归复制-L复制软连接-p保持权限不变-m保持修改时间不变-o所有者不变-g用户组不变-D –devices –sp -v 显示过程 -z 传输数据的时候进行压缩 -P 显示每个文件传输过程（进度条)断点续传–partial –progress –bwlimit 限速 注意不要与-z一起使用 –exclude–excludefrom 排除 –delete 目标目录与原目录保持一致的传输（高度保持2遍一致，实时同步） –password 123#限速并传输rsync -aP --bwlimit=500kb/tmp/1g10.0.0.31:/mnt/ rsync企业应用 应用场景 应用建议 rsync作为命令使用 临时拉取，推送数据，未来这个需求可以使用scp命令实现 rsync服务+定时任务 定时备份，定期备份案例（定时任务进行备份+通过rsync传输备份） rsync服务+serync/lsyncd实现实时同步 解决存储服务单点问题 rsunc不同模式 本地模式 123rsync -a /etc/ /tmp/rsync -a /etc /opt/ :warning:在rsync中对于 /etc/和 /etc 是有区别的 /etc /etc目录 +目录的内容 /etc/ /etc/目录下面的内容 远程模式 1rsync -av /etc root@10.0.0.31 守护进程模式 修改配置文件/etc/rsyncd.conf 1234567891011121314151617181920fake super =yes #如果不开启测C7传输报错（伪装成root）uid = rsyncgid = rsyncuse chroot = nomax connections = 2000 #最大连接数timeout = 600 #超时链接时间pid file = /var/run/rsyncd.pid #存放服务的pidlock file = /var/run/rsync.lock #进程锁文件 防止重复运行log file = /var/log/rsyncd.log #服务端日志##ignore errors #忽略错误read only = false #可以读写list = false #关闭rsrnc服务端列表#hosts allow = 10.0.0.0/24#hosts deny = 0.0.0.0/32auth users = rsync_backupsecrets file = /etc/rsync.password###########################[data]path =/data 后续配置（准备用户，目录以及密码文件） 123456789#添加虚拟用户useradd -s /sbin/nologin -M rsync#创建密码文件echo 'rsync_backup:123 '&gt;/etc/rsync.passwordchmod 600 /etc/rsync.password#共享目录与权限mkdir /data/chown -R rsync.rsync /data/ 启动服务 123systemctl start rsyncd #开启服务systemctl enable rsyncd #设置运行systemctl status rsyncd #查看状态 传输测试 1rsync -av /etc/hostname rsync_backup@backup::data 设置免密登录 12echo '123' &gt;&gt; /etc/rsync.clientchmod 600 /etc/rsync.client 访问控制-安全措施 hosts allow 只准指定的ip或网段访问 hosts deny 拒绝 项目：全网备份项目 1）环境准备 角色 主机 运行服务 存放备份 backup rsync 服务端 生成备份 nfs01 rsync 客户端 生成备份 web01 rsync 客户端 2）项目步骤 步骤说明 详细内容 :one:rsync服务端并调试 服务端配置 /backup目录 rsync客户端节点配置配置脚本 备份推送清理 其他节点匹配值定时任务 定时运行脚本 在备份服务器上检查并发送结果邮件 3）rsync服务端调试 4）客户端备份脚本bak_conf.sh 12345678910111213141516171819202122232425#!/bin/bash#desc:备份服务器的配置文件#1.变量ip=$(hostname -I | awk '{print $2}')backup_dir=/backup/${ip}time=`date +%F_%w`backup_file=conf-${time}.tar.gzbackup_server_ip=172.16.1.41mode_name=backupuser_name=rsync_backup#2.备份命令mkdir -p ${backup_dir}tar zcf ${backup_dir}/${backup_file} /etc/ /var/spool/cron#md5md5sum ${backup_dir}/${backup_file} &gt;${backup_dir}/fingerprint.md5#3.推送命令rsync -av ${backup_dir} ${user_name}@${backup_server_ip}::${mode_name} --password-file=/etc/rsync.client#4.删除旧备份find ${backup_dir} -type f -name &quot;*.tar.gz&quot; -mtime +7 |xargs rm -f 5）服务端脚本测试checkbak.sh 123456789101112131415161718#!/etc/bash#desc:检查旧的备份并删除result_file=/server/scripts/result.txt#0.清理旧备份find /backup/ -type f -name &quot;*.tar.gz&quot; -mtime +180 |xargs rm -f #1.统计备份结果find /backup/ -type f -name &quot;*.tar.gz&quot; |xargs \\ls -lhd |\\awk -F '[ /]+' '{print $(NF-1),$NF,$5 }' |\\column -t &gt; ${result_file} #校验find /backup/ -name &quot;fingerprint.md5&quot; |xargs md5sum -c &amp;&gt;&gt;${result_file} #2.发送结果mail -s &quot;每日备份结果&quot; 1296959377@qq.com &lt;${result_file} 6）增加校验功能 单个文件的校验 123456789101112131415161718#创建oldboy.txt测试文件echo oldboy &gt;oldboy.txt#创建md5的值md5sum oldboy.txt3fe396c01f03425cb5e2da8186eb090do1db0y.txt#MD5值和文件名#保存md5值到文件md5sumoldboy.txt &lt;oldboy.md5#通过md5值文件，校验文件的md5信息（文件是否变化）md5sum -coldboy.md5oldboy.txt:0K#0K表示没有改变#修改文件内容，测试MD5是否能发现文件是否变化.echo lidao &gt;oldboy.txt#进行md5检查md5sum -c oldboy.md5oldboy.txt:FAILED#FAILED表示文件内容发生变化，md5值变了.md5sum:WARNING:1 computed checksum did NOT match md5sum-c说明-check根据md5文件记录进行对比md5值 路径/名字 多个文件的校验 1234567891011#给/etc/下面所有的文件创建ND5保存到指定文件中find /etc/-type f md5sum&gt;etc-all.md5#进行校验md5sum -c etc-all.md5#修改/etc/下某个文件比如增加个&quot;#&quot;vim /etc/rsyncd.conf#进行校验md5sum -c etc-all.md5#只显示md5异常的文件md5sum --quiet -c etc-all.md5 2.数据服务-存储服务1）环境说明 主机 运行服务 nfs01 10.0.0.31 nfs 服务端 web01 10.0.0.7 nfs 客户端 通过挂载使用 2）服务端部署 部署 1yum install -y rpcbind nfs-utils 启动 12345678#启动rpcbindsystemctl enable rpcbindsystemctl start rpcbindrpcinfo -p#启动nfssystemctl enable nfssystemctl start nfs NFS服务端的配置文件 /etc/exports 123echo '/data/ 172.16.1.0/24(rw)' &gt;&gt; /etc/exports#配置表示：172.16.1.0/24网段对NFS服务端的/data/目录，拥有rw读写权限systemctl reload nfs reload 表示优雅重启，不会断开已有连接 restart在nfs中，会导致客户端一段时间卡住 NFS创建数据目录修改权限 12mkdir -d /data/chown nfsnobody.nfsnobody /data/ 3）客户端挂载12yum install -y nfs-utilsmount -t nfs 172.16.1.31:/data /mnt NFS相关文件 nfs服务端或客户端 说明 NFS服务端配置 /etc/exports(配置文件里面的) -&gt; /var/lib/nfs/etab(当前使用的nfs服务端配置) NFS客户端配置 客户端：mount /etc/rc.local 或/etc/fstab -&gt; /proc/mounts(当前系统的挂载情况) nfs 客户端永久挂载 123456#方法01挂载命令写入到/etc/rc.Localchmod +x /etc/rc.d/rc.Local#方法02按照/etc/fstab格式要求书写设备 挂载点 文件系统类型 挂载参数 是否检查 是否备份172.16.1.31:/data/ /upload/ nfs defaults 0 0 温馨提示： 如果配置了nfs客户端永久挂载，需要优先启动nfs服务端 NFS服务端配置文件 核心配置 服务端配置选项 说明 rw 可以读写共享目录 ro 只读read only sync 同步，只要用户上传，就把数据写到磁盘上， async 异步，用户上传的数据，nfs先临时存放到内存中，过一段时间写入到磁盘.并发高，数据可能丢失 4）服务端用户压缩 服务端配置选项-用户压缩 说明 root_squash 如果客户端是root用户访问，则到了nfs服务端会被压缩（默认的） no_all_squash 如果客户端不是root用户访问，则不进行压缩（保存原始用户，默认的） all_squash 所有用户都进行压缩（不是太安全） anonuid和anongid 用于指定压缩的匿名用户（默认是nfsnobody用户） 5）用户压缩案例 用户压缩案例：设置/nfsdata共享目录，匿名用户为Www.客户端挂载到/upload-video/ www用户的uid,gid:1999 123456789101112131415#1.所有主机(nfs服务端和nfs客户端)添加用户www uid:统一1999 1999groupadd -g 1999 wwwuseradd -u 1999 -g www -s /sbin/nologin -M www#2.nfs服务端配置echo '/nfsdata/ 172.16.1.0/24(rw,all_squash,anonuid=1999,anongid=1999)' &gt;&gt;/etc/exportsmkdir -p /nfsdata/chown www.www /nfsdata/#3.nfs客户端挂载mount -t nfs 172.16.1.31:/nfsdata/ /upload-video/mkdir -p /upload-video/touch abc{1..10}.mp4 NFS优化 终极优化目标： 尽可能让用户的请求在访问网站架构之前解决掉。（尽可能把用户的请求往前推） NFS优化：硬件（物理服务器+nfs服务） NFS安全优化：客户端挂载只能上传，无法执行. 12345 mount -o noexec,nosuid,nodev -t nfs 172.16.1.31:/data /video/#这几个是客户端挂载选项#noexec 挂载的nfs目录中如果有命令，无法运行#nouid 带有suid的命令#nodev 带有特殊属性的文件 NFS有单点故障，选择其他存储：公有云0SS(阿里云)（对象存储在代码里面调用） 课后研究分布式存储：GLusterFS(GFS) 3.实时同步存储服务 作用 服务器 环境准备 rsync服务端 10.0.0.31backup01 完成rsync服务端部署 sersync服务端（rsync客户端）nfs服务器 10.0.0.41 nfs01 解压安装配置sersync配置并创建nfs共享目录文件 用户客户端 10.0.0.7 web01 挂载到nfs01共享目录 Sersync2/confxml.xml 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566&lt;?xml version=&quot;1.0&quot; &lt;head version=&quot;2.5&quot;&gt; &lt;host hostip=&quot;localhost&quot; port=&quot;8008&quot;&gt;&lt;/host&gt; &lt;debug start=&quot;false&quot;/&gt; &lt;fileSystem xfs=&quot;false&quot;/&gt; &lt;filter start=&quot;false&quot;&gt; &lt;exclude expression=&quot;(.*)\\.svn&quot;&gt;&lt;/exclude&gt; &lt;exclude expression=&quot;(.*)\\.gz&quot;&gt;&lt;/exclude&gt; &lt;exclude expression=&quot;^info/*&quot;&gt;&lt;/exclude&gt; &lt;exclude expression=&quot;^static/*&quot;&gt;&lt;/exclude&gt; &lt;/filter&gt; &lt;inotify&gt; &lt;delete start=&quot;true&quot;/&gt; &lt;createFolder start=&quot;true&quot;/&gt; &lt;createFile start=&quot;false&quot;/&gt; &lt;closeWrite start=&quot;true&quot;/&gt; &lt;moveFrom start=&quot;true&quot;/&gt; &lt;moveTo start=&quot;true&quot;/&gt; &lt;attrib start=&quot;false&quot;/&gt; &lt;modify start=&quot;false&quot;/&gt; &lt;/inotify&gt; &lt;sersync&gt; &lt;localpath watch=&quot;/opt/tongbu&quot;&gt; &lt;remote ip=&quot;127.0.0.1&quot; name=&quot;tongbu1&quot;/&gt; &lt;!--&lt;remote ip=&quot;192.168.8.39&quot; name=&quot;tongbu&quot;/&gt;--&gt; &lt;!--&lt;remote ip=&quot;192.168.8.40&quot; name=&quot;tongbu&quot;/&gt;--&gt; &lt;/localpath&gt; &lt;rsync&gt; &lt;commonParams params=&quot;-artuz&quot;/&gt; &lt;auth start=&quot;false&quot; users=&quot;root&quot; passwordfile=&quot;/etc/rsync.pas&quot;/&gt; &lt;userDefinedPort start=&quot;false&quot; port=&quot;874&quot;/&gt;&lt;!-- port=874 --&gt; &lt;timeout start=&quot;false&quot; time=&quot;100&quot;/&gt;&lt;!-- timeout=100 --&gt; &lt;ssh start=&quot;false&quot;/&gt; &lt;/rsync&gt; &lt;failLog path=&quot;/tmp/rsync_fail_log.sh&quot; timeToExecute=&quot;60&quot;/&gt;&lt;!--default every 60mins execute once--&gt; &lt;crontab start=&quot;false&quot; schedule=&quot;600&quot;&gt;&lt;!--600mins--&gt; &lt;crontabfilter start=&quot;false&quot;&gt; &lt;exclude expression=&quot;*.php&quot;&gt;&lt;/exclude&gt; &lt;exclude expression=&quot;info/*&quot;&gt;&lt;/exclude&gt; &lt;/crontabfilter&gt; &lt;/crontab&gt; &lt;plugin start=&quot;false&quot; name=&quot;command&quot;/&gt; &lt;/sersync&gt; &lt;plugin name=&quot;command&quot;&gt; &lt;param prefix=&quot;/bin/sh&quot; suffix=&quot;&quot; ignoreError=&quot;true&quot;/&gt; &lt;!--prefix /opt/tongbu/mmm.sh suffix--&gt; &lt;filter start=&quot;false&quot;&gt; &lt;include expression=&quot;(.*)\\.php&quot;/&gt; &lt;include expression=&quot;(.*)\\.sh&quot;/&gt; &lt;/filter&gt; &lt;/plugin&gt; &lt;plugin name=&quot;socket&quot;&gt; &lt;localpath watch=&quot;/opt/tongbu&quot;&gt; &lt;deshost ip=&quot;192.168.138.20&quot; port=&quot;8009&quot;/&gt; &lt;/localpath&gt; &lt;/plugin&gt; &lt;plugin name=&quot;refreshCDN&quot;&gt; &lt;localpath watch=&quot;/data0/htdocs/cms.xoyo.com/site/&quot;&gt; &lt;cdninfo domainname=&quot;ccms.chinacache.com&quot; port=&quot;80&quot; username=&quot;xxxx&quot; passwd=&quot;xxxx&quot;/&gt; &lt;sendurl base=&quot;http://pic.xoyo.com/cms&quot;/&gt; &lt;regexurl regex=&quot;false&quot; match=&quot;cms.xoyo.com/site([/a-zA-Z0-9]*).xoyo.com/images&quot;/&gt; &lt;/localpath&gt; &lt;/plugin&gt;&lt;/head&gt; 4.SSHD服务openssh服务和telnet服务 共同点 区别 应用场景 openssh 服务 远程连接 数据加密的 默认使用openssh telnet 服务 远程连接 数据未加密 升级openssh服务时，可启用telnet服务 telnet服务 12345678安装服务yum install-y telnet-server#启动systemctl disable telnet.socketsystemctl start telnet.socket#本地shell中连接telnet10.0.0.61 23 openssh-server配置文件 核心配置文件：/etc/ssh/sshd_config Openssh服务端配置详解 连接加速 UseDNS no 是否开启反向解析：ip→域名或主机名 GSSAPIAuthentication GSS认证功能关闭 安全优化相关 Port 默认是Pont22 端口范围1-65535推荐1w以上的端口 PermitRootLogin 禁用root用户远程登录权限.默认是yes(可以让root远程登录)(ubt系统中默认是no) ListenAddress 监听的地址（后面需要指定本地网卡的p地址）可以控制用户只能通过内网访问 5.集群批量管理-密钥认证与ansible模块 部署密钥认证 ansible批量管理-部署-分发 ansible的常用模块 密钥认证 创建密钥对 1ssh-keygen -t rsa 分发公钥 1ssh-copy-id -i /root/.ssh/id_rsa.pub root@10.0.41 连接测试 1ssh root@10.0.41 hostname -I 自动化创建密钥 1234ssh-keygen -f ~/.ssh/id_rsa -P ''#-f用于指定私钥的位置#-P密码短语设置为空 自动化分发 1234567891011121314151617#安装密码提供密码yum install -y sshpass#sshpass命令基本使用#-p指定密码ssh10.0.0.7 hostname-I #检查是否需要输入yes/no#然后使用：sshpass -p1 ssh 10.0.0.7 hostname -I#使用sshpass与ssh-copy-id分发公钥ssh-copy-id 10.0.0.31 #检查是否需要输入yes/no#然后使用：sshpass -p1 ssh-copy-id 10.0.0.31#第一次连接时候提示yes/no 临时不检查主机信息 -oStrictHostKeyCheckingsshpass -p1 ssh-copy-id -i ~/ssh/id_rsa.pub -oStrictHostKeyChecking=no 10.0.0.41 自动分发脚本 fenfa.sh 1 Absible自动维护/etc/ansible/ansible.cfg 1234#关闭取消验证#开启日志71:host_key_checking =False111:log_path=/var/log/ansible.log 主机清单文件 /etc/ansible/host 1234567891011121314[web]172.16.1.7172.16.1.8[nfs]172.16.1.31[backup]172.16.1.41#子组 组名:children[data:children]backupnfs 运行ansible 123ansible all -m ping #所有的主机andible web - m ping #web分组的主机andible 172.16.1.x - m ping #某个主机 Ansible模块 ansible中的模块就类似于Linux中的命令，我们Linux命令管理系统，我们通过andible模块实现批量管理 模块分类 模块 命令和脚本模块 command模块：默认的模块，支持简单的命令不支持特殊符号 shell 模块：执行命令，支持特殊符号 script模块：分发脚本并执行 文件 file ：创建目录，文件，软连接 copy：远程分发文件，修改权限，所有者，备份 systemd：服务管理 service：服务管理（了解） 软件包 yum源 yum_repository yum命令 get_url 下载软甲 系统管理 mount模块 挂载 cron模块 定时任务 用户管理 group模块 管理用户组 user模块 管理用户 其他 压缩解压(unarchive),rsync模块(synchronize),数据库模块(mysql_db,mysql_user)… ansible管理docker k8s zabbix grafana… 用于调试检查 ping模块检查ansible与其他节点连通性. debug模块 用于检查/显示变量 ansible选项 ansible -i 指定主机清单文件 -m 指定模块 -a 指定模块中的选项 Command 模块12#批量获取主机名(ansible 默认command模块)ansible all -a 'hostname' shell模块123#批量获取ip地址ansible all -m shell -a &quot;ip a s eth0 | awk -F'[/ ]+' 'NR==3{print \\$3}'&quot; :warning: 温馨提示：shell模块不推荐执行较为复杂的指令，如果需要执行放在脚本中执行.避免因为特殊符号和引号导致的问题. script模块 执行流程：分发脚本，在被管理端运行脚本 123456789101112131415#!bin/bash#author:lidao996#desc:系统巡检脚本nostnamehostname -Iip a s eth0 | awk -F'[/ ]+' 'NR==3{print $3}'uptimewhoamidate +%Fsleep 10#测试巡检脚本ansible all -m script -a '/server/scripts/sys_info.sh' file模块 file模块不仅可以创建文件，还可以管理目录，管理软连接 file模块选项 file 模块 模块说明 path 路径（目录，文件）必填 src 源文件一般用于link 创建软连接 state 状态（模式）state=directory 创建目录state=file（默认）更新文件，如果文件不存在也不创建state=link 创建软连接 state state=absent 删除（ :warning: 注意如果是目录则会递归删除目录 ） mode mode=755 创建并修改权限 onwer onwer=root copy模块","link":"/2024/02/27/%E9%9B%86%E7%BE%A4%E6%9E%B6%E6%9E%84%E5%AD%A6%E4%B9%A0-md/"},{"title":"Linux基础学习","text":"linux 基础命令以及环境搭建 Linux 版本选型 系统版本 CentOS 没有LTS 选择较新的版本，CentOS7.x 7.9 Ubuntu LTS （长期稳定版）18.04 、20.04 麒麟 Kylin v10（CentOS7 更新了内核） 工作学习环境部署1.设置ROOT 密码1sudo passwd 2.网卡配置设置静态IP 123456789101112131415ifconfigvim /etc/sysconfig/network-scripts/ifcfg-ens33 BOOTPROTO=staticONBOOT=yesIPADDR=你的静态IP地址NETMASK=你的子网掩码GATEWAY=你的默认网关DNS1=首选DNS服务器DNS2=备用DNS服务器systemctl stop firewalld.service 关闭防火墙 重启网卡： 查看防火墙状态： 关闭防火墙： 禁用防火墙： 3.更改yum源 备份原yum源 1mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup 下载最新的centos yum源（centos7版本 ） 1234wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo #阿里云#或者curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo 2）互联网epel源配置#扩展源，有很多软件在基本源中没有 12 wget -q -O /etc/yum.repos.d/epel.repo \\http://mirrors.aliyun.com/repo/epel-7.repo 清空原yum缓存 1yum clean all 运行 yum makecache 生成缓存 1yum makecache 查看是否生效 1yum repolist Linux核心目录结构 目录名称 说明 / 根目录 /home 普通用户的家目录 /root Root 用户的家目录 /etc 系统，服务配置文件的目录 /tmp 临时目录 /ptoc 系统服务，进程信息，类似于汽车的仪表盘 /dev Device，设备文件目录，硬盘、光盘… 《鸟叔的Linux私房菜》 P165 Liunx核心命令 进入某个目录：**cd** 列表显示目录内容：**ls** -l long以长格式显示（显示详情信息），简写成ll -t time 按照修改时间顺序 -r 逆序排序，一般-rt一起使用 -h 以人类可读形式显示大小 限时自己所在目录：**pwd** 创建目录：**mkdir** -p 创建多层目录 创建文件：**touch** 移动\\改名：**mv** 复制，拷贝：**cp** -a all简单理解为复制全部 -r 递归复制，复制目录 -p 复制时保持属性不变 -d 可以复制软连接 输出信息到屏幕：**echo** 通常配合重定向符号使用： &gt; :重定向符号，先清空文件再写入 &gt;&gt;:追加重定向，把信息写入在末尾 [root@localhost tmp]# echo lada996 oldboy008 &gt;&gt; ./testecho.txt [root@localhost tmp]# echo lada996 oldboy008 &gt;&gt; ./testecho.txt [root@localhost tmp]# echo lada996 oldboy008 &gt;&gt; ./testecho.txt [root@localhost tmp]# echo lada996 oldboy008 &gt;&gt; ./testecho.txt [root@localhost tmp]# cat testecho.txt dbd jdjfjdksjj lada996 oldboy008 lada996 oldboy008 lada996 oldboy008 lada996 oldboy008 [root@localhost tmp]# echo lada996 oldboy008 &gt; ./testecho.txt [root@localhost tmp]# cat testecho.txt lada996 oldboy008 [root@localhost tmp]# cat /etc/hostname &gt;&gt; testecho.txt [root@localhost tmp]# cat testecho.txt lada996 oldboy008 localhost.localdomain 12345678910111213141516 - ### 编辑文件与修改文件：**`vi/vim`** 快捷键： ```sh 行间调整： 移动到最后一行 Shift+g 移动到第一行 gg 移动到某一行 100gg 列间调整： 光标移动到行首 ^ 光标移动到行尾 $ 显示行号：:Set nu 隐藏行号： ：no nu 搜索：/xxx n健下一个 批量编辑： 1234567891011批量删除：ctrl + v 进入批量操作模式选择要操作的区域然后按 d，删除批量添加：ctrl + v 进入批量操作模式选择要操作的区域选完后按 shift + i 进入编辑模式写入内容按esc等待 删除：**rm** -r : 递归删除 -f ：就是force的意思，忽略不存在的文件，不会出现警告 目录深入了解/etc/目录下 /etc/文件 说明 企业应用 /etc/hostname 主机名配置文件 每个Liunx主机配置主机名，根据主机名区别不同的功能 /etc/hosts 主机名和ip的对应关系 在网站中做访问用 /etc/sysconfig/network-scripts/ifconfig-eth0 网卡配置文件 物理机需要改，云服务器自动 /etc/rc.local 开机自启动文件 吧需要开机的时候 自动运行的命令，服务放到这个文件中 /etc/fstab 开机自动挂载的文件 配置磁盘挂载使用 /etc/motd 文件中的内容会在用户登录系统后显示出来 显示温馨提示，佛祖保佑永不宕机 /etc/issue /etc/issue.net 文件中的内容会在用户登录系统前显示出来 这个文件内容应该清空 1.修改主机名 1hostname 2.网卡配置文件 ​ /etc/sysconfig 系统配置文件 ​ /etc/sysconfig/network-scripts/ 网络的配置文件 3./etc/rc.local 开机自启动文件 1第一次使用这个文件要给/etc/rc.d/rc/local增加执行权限 /var/目录下 var 经常变化的内容，variable 比如：日志 /var/ 经常变化的内容 说明 /var/log 系统以及服务的各种日志目录 /varlog/secure 存放用户登录情况日志 /var/log/messages 通用各种服务的日志，日志很多 /proc/目录下面 /proc/ 系统，进程信息，内核 说明 /proc/cpuinfo cpu信息 /proc/meminfo 内存信息 /proc/loadavg 系统负载信息，衡量系统繁忙程度 /proc/mounts 系统挂载信息 1.cpu信息 lscpu 查看cpu信息，核心数，颗数 2.内存信息 日志查询四剑客 查看日志不要使用，cat或vim，vi命令，未来日志可能会很多 如果使用cat查看，会刷屏 如果使用vi/vim查看，从磁盘中加载到内存，占用系统内存 日志查询命令使用1.head 限时文件头几行，默认是头10行 -n ：限时头n行，默认限时头10行 2.tail 显示文件后几行，默认是后10行 -n -f 显示文件末尾的实时更新 3.less 按页限时文件内容 -N 显示行号 1234567q 退出查看空格或f 下一页b 上一页G 最后一行g 到第一行19g 到第19行 4.more 按页显示文件内容，达到最后一行就退出 wc统计 word count 统计文件单词数，大小，行数,主要用于统计行数 -l 统计行数 12345678#统计secure文件中密码失败的次数 （password check failed）#1.过滤输出中错误信息#2。交给wc -l统计grep 'password check failed' /var/log/secure |wc -l3 which 查询命令的位置 文件比较命令 对比新旧配置文件，修改了哪些内容 这时候我们需要进行文件对比操作，可以通过diff，vimdiff命令实现 diff vimdiff（推荐使用） 排序去重组合:star::star::star: 统计日志，日志分析，系统信息统计必备命令 sort：排序 -n 按照数字排列 -k 指定某一列，根据某一列进行排序 -r 逆序排序 -t 指定分隔符，单个字符 uniq：去重 -c 去重并显示数量 日期组合 date ntpdate 特殊符号 date +: 格式 -d 根据说明修改时间 -s 修改时间 ntpdate 同步时间12ntpdate ntp1.aliyun.com #同步阿里云时间提示offset xxx sec 即成功 timedatectl修改时区12timedatectl status #查看信息timedatectl set-timezone Asia/Shanghai 特殊符号 `` :反引号里的命令会先执行 | ：管道符会将前面每一个进程的输出（stdout）直接作为下一个进程的输入（stdin）,一般过滤 Linux 四剑客 grep 筛选 find 查找文件 sed awk awk概述 格式 执行流程 文件属性体系inode和block部分 inode 索引节点 ，inode类似于身份证号，通过inode文件能够找到文件 :star: inode 是一个空间，类似于身份证 inode 红建中存放的是文件属性信息，文件大小，修改时间，权限，所有者… inode 空间存放block的位置 （指向文件实体的指针） :star:block块（数据块）：存放数据 查看 1234567block： df -h （磁盘空间使用情况） inode df -idu(查看目录所占磁盘空间)du -sh /etc/-s 仅列出总量，不展示子目录-h 以人类读懂形式展示文件大小 文件类型 Linux常见文件类型 含义 - 文件 file d 目录 directory l 软连接 ，类似于快捷方式 c 字符设备 char 特殊文件，不断输出，吸入 b 块设备 block 硬盘 s 套接字 socket文件 p 管道文件 查看文件类型：file命令 文件类型 text data 二进制文件 软硬链接 :star: :star::star::star::star: 软链接：类似于windows中的快捷方式，也是一种文件；用于存放源文件的路径（位置+名字）应用最多 硬链接：在同一个分区中的inode号想通了，这些文件互为硬链接 如何创建 ln：（link）创建软硬链接，默认创建硬链接 打包压缩三剑客 运维活成中，我们需要备份文件，备份某一个目录中的文件，避免空间浪费 压缩命令 应用场景 tar:star::star::star::star::star: 大部分场景使用tar即可（创建，查看，解压，压缩） gzip 一般配合其他命令使用 zip unzip 一般用于解压zip格式的压缩包 tar:star: :star::star::star::star: Linux 打包压缩 ​ 打包（放在一起）tar ​ 压缩 （节约空间）tar配合参数命令 创建123456tar zcvf /tmp/etc.tar.gz /etc/v verbose 显示过程c create 创建包，如果只cf选项就是打包，不压缩z gzip tar命令创建包后通过gzip工具压缩 所以tar打包 gz压缩 扩展名.tar.gzf file 指定压缩包，f选项放在最后 查看123tar -tf /tmp/etc.tar.gzt list列表，查看压缩包内容 解压12tar -zxvf /tmp/etc.tar.gz 默认解压得到当前目录x 解压 解压到指定目录123tar -zxvf /tmp/etc.tar.gz -C /mnt/-C 指定目录 zip 专门处理.zip格式的压缩包，tar 无法处理 .zip 是windows 和linux共同支持的格式 1234压缩zip -r etc.zip /etc/解压unzip etc.zip 别名与用户管理体系别名 别名，给命令进行设置 应用场景： 给常用命令设置一个快捷键 给危险命令加上防护措施 如何创建别名给rm 设置别名，只要运行就提示“ rm is dangerous ,pls use mv” 0）查看系统别名alias 1alias 1）设置别名12alias rm='echo rm is dangerous ,pls use mv.'#设置别名 alias 昵称='命令' 如果真想删除文件（临时取消别名） 使用绝对路径 /bin/rm 使用反斜杠 \\别名 2）永久生效修改配置文件 ~/.bashrc /etc/profile(全局) 1source /etc/profile #配置生效 用户管理UID,GID Linux中的用户是有一个标记，类似于身份证号码，叫做UID，GID UID user id 用户的id号，身份证号码 GID group id 用户组ID号，户口本号码 用户相关的文件 用户相关的文件 /etc/passwd 存放用户信息 /etc/shadow 存放密码信息 /etc/group 用户组信息 /etc/gshadow 用户组密码信息 /etc/passwd 解释（以：为分隔符） 123root :x: 0:0 :root :/root :/bin/bashnobody:x: 99:99 :Nobody :/ :/sbin/nologin用户名| 密码标记| UID:GID|说明信息| 家目录 | 用户使用的命令解释器 /etc/shadow 123master:$6$5d5ADhLgwQVeNIaB$/3NkToxaay4KurZlZagewsE67CD4RTdEEQ09ItL.N6cny1Y3XeH1YVwexok9Ow0njIt9w40/OZlv0HwMOgvpq.::0:99999:7:::ntp:!!:19780::::::用户名 |密码 |密码过期时间 /etc/group 123root:x:0:bin:x:1:组名（默认和用户名一致） |密码 |gid |组里的额外用户 用户管理命令 增加 删除 修改 查看 增加 useradd 增加用户 useradd的选项 说明 -u 指定用户uid -s 指定解释器 -M 不创建家目录 passwd 修改密码 passwd 选项 说明 –stdin 非交互式设置密码 su 切换用户 123su - master#退出当前用户#ctrl + d 删除 userdel 选项 -r 删除用户家目录 修改 passwd 修改密码 usermod 修改用户信息 查询 id 查询用户uid，gid 用户组信息，用户是否存在 whoami 查询当前用户名字 w 查看当前登录的用户信息，并且正在做什么 last 用户的登录情况 sudo 权限管理 用于给普通用户配置的命令，配置了sudo权限后可以以root权限命令 sudo授权使用1234#root 授权配置visudo#普通用户使用sudo + 命令 堡垒机 堡垒机产品 开源产品 Jumpserver，Teleport 物理硬件设备 购买 云服务 购买 安装teleport 12345678910111213#解压tar -zxvf teleport-server-linux-x64-3.6.4-b3.tar.gzcd teleport-server-linux-x64-3.6.4-b3#运行安装命令setup.sh#查看状态/etc/init.d/teleprot status/etc/init.d/teleprot stop #关闭/etc/init.d/teleprot start #开启/etc/init.d/teleprot restart #重启 关闭防火墙和selinux 12345678910#关闭防火墙systemctl stop firewalldsystemctl disable fiewalld#关闭selinux（工作中基本关闭）setenforce 0 #临时关闭vim /etc/selinux/config#找出中间行SELINUX=enforcing 修改为 SELINUX=disabledgetenfore #结果是permissive或diabled都表示关闭，如果是enforcing表示开启 浏览器访问 http：//10.0.0.200:7190 Liunx权限rwx 权限 含义 r read 可读 w write 可写 x excute 可执行 Linux特殊属性 应用场景：预防重要文件或命令被修改. lsattr 查看这种特殊属性 chatrr 修改这种特殊属性 a属性 append 只能追加 i属性 immutable 不朽的，无法被毁灭的 123chattr +a oldboy.txt #-achattr +i oldboy.txt #-i 系统管理之软件包管理 安装方式推荐 yum 优先 rpm包 二进制 编译安装 rpm 安装方式 安装rpm包 -ivh -i install -v 显示过程 -h 人类可读过程 1234567891011121314案例01 安装rpm包#下载软件包mkdir -p /server/tools/wget --no-check-certificate -P /server/tools/ https://mirrors.tuna.tsinghua.edu.cn/zabbix/zabbix/6.0/rhel/7/x86_64/zabbix-agent2-6.0.0-1.el7.x86_64.rpmwget下载指定内容，默认下载到当前目录-P 下载到指定目录，目录不存在会创建--no-check-certificate 下载地址https，加上这个选项，下载失败。#安装依赖yum install -y pcre2#安装软件包zabbix-agent2 rpm -ivh zabbix-agent2-6.0.0-1.el7.x86_64.rpm 查询 12345#检查软件包是否安装成功rpm -qa | grep zabbix#查看软件包内容rpm -ql zabbix-agent2 修改-升级 删除 三剑客日志处理特殊符号 引号 含义 单引号 所见即所得 双引号 和单引号类似，其中的特殊符号可以运行，对于{}不解析 不加引号 和双引号类似 ，额外支持通配符 反引号 优先执行，先执行反引号里的命令","link":"/2024/02/23/Linux%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"},{"title":"JQuery笔记","text":"jQuery时一个快速简洁的JavaScript库，其设置宗旨是“write Less，Do More”，即提倡写更少的代码。j就是Javascript；Query 查询；意思是查询js，把js中的DOM操作做了封装，我们可以快速查询使用里面的功能。 jQuery封装了JAvaScript常用的功能代码，优化了Dom操作、处理事件、动画设计和Ajax交互 jQuery概述jQuery时一个快速简洁的JavaScript库，其设置宗旨是“write Less，Do More”，即提倡写更少的代码。j就是Javascript；Query 查询；意思是查询js，把js中的DOM操作做了封装，我们可以快速查询使用里面的功能。 jQuery封装了JAvaScript常用的功能代码，优化了Dom操作、处理事件、动画设计和Ajax交互 常见的JavaScript库 jQuery Prototype YUI Dojo Ext JS 移动端 jQuery优点： 轻量级 跨浏览器兼容 链式编程 对事件样式动画支持，大大简化了DOM操作 支持插件扩展开发：树形菜单，轮播图等 开源，免费 官网：https://jquery.com jQuery基本使用1.入口函数等着DOM结构完成即可执行内部代码，不必等所有摆布资源加载完成，jQuery帮我们完成了封装。相当于原生js中的DOMContentLoaded。 传统方式： 1234$(document).ready(function (){ $('div').hide(); ··· //此处是页面DOM加载完成的入口 }) 常用方式： 1234$(function (){ $('div').hide(); ··· //此处是页面DOM加载完成的入口 }) 2.jQuery的顶级对象$$是jQuery的别称，在代码中可以使用jQuery代替$,但为了方便通常都是直接使用$ 3.jQuery对象和DOM对象1234//1.DOM对象：var myDiv = document.querySelector('div');//2.jQuery对象:$('div'); 用原生JS获取来的对象就是DOM对象 jQuery方法获取来的元素就是jQuery对象 jQuery对象的本质是：利用$对DOM对象包装产生的对象（伪数组形式存储） **注:**jQuery对象只能使用jQuery方法，DOM对象则使用原生的JavaScript属性和方法 DOM和jQuery对象之间是可以相互转换的，因为js比jQuery更大，jQuery只是封装了常用的属性和方法，想要使用js的方法需要将jQuery对象转换为DOM对象才能使用。 1234567891011/** * 1.DOM对象转换为jQuery对象 */var myvideo = document.querySelector(&quot;video&quot;);// $(myvideo).play();//报错jquery没有play方法/** * 2.jQuery对象转换为DOM对象 *///video 便签加入muted属性才能自动播放$(myvideo)[0].play();$(myvideo).get(0).play(); jQuery常用APIjQuery选择器​ 原生js获取元素方式很多，很杂，而且兼容性情况不一致，因此jQuery给我们做了封装，使获取元素统一标准。 1$(&quot;选择器&quot;)//里面直接写CSS选择器即可，但是要加引号 jQuery设置样式 12// 2.给四个div设置背景颜色$(&quot;div&quot;).css(&quot;background&quot;,&quot;pink&quot;) 隐式迭代（重要）遍历内部DOM元素(伪数组信息存储)的过程就叫隐式迭代 简单理解：给匹配到的所有元素进行遍历循环，执行相应的方法，而不用我们再进行循环，简化我们的操作，方便我们调用 筛选选择器 语法 用法 描述 :first $(‘li:first’) 获取第一个li元素 :last $(“li:last’) 获取最后一个li元素 :eq(index) $(“Ii:eq(2)”) 获取到的li元素中，选择索引号为2的元素，索引号inde从0开始。 :odd $(“li:odd”) 获取到的li元素中，选择索引号为奇数的元素 :even $(“li:even”) 获取到的li元素中，选择索引号为偶数的元素 筛选方法（重点） 语法 用法 说明 parent() $(“li”).parent(); 查找父级 children(selector) $(“ul”).children(“li”) 相当于$(“ul&gt;li”)，最近一级(亲儿子) find(selector) $(“ul”).find(“li”); 相当于$(“ul li”),后代选择器 siblings(selector) s(“.first”).siblings(“li””); 查找兄弟节点，不包括自己本身 nextAll([expr]) $(“.first” ) .nextAll()c 查找当前元素之后所有的同辈元素 prevtAll([expr]) $(“.last” ).prevAll() 查找当前元素之前所有的同辈元素 hasClass(class) $( ‘div ‘ ).hasclass(“protected”) 检查当前的元素是否含有某个特定的类，如果有，则返回true eq(index) $(“li”).eq(2); 相当于$(“li:eq(2)” ) ,index从0开始 重点：parent() childern() find() siblings() eq() 补充： 语法 用法 说明 parents([expr]) $(div).parents(“.p_number”) 返回指定祖先元素 jQuery样式操作 jQuery 可以使用 css 方法来修改简单元素样式； 也可以操作类，修改多个样式。 操作css123456789//1. 参数只写属性名，则是返回属性值$(this).css(&quot;color&quot;);//2. 参数是属性名， 属性值，逗号分隔， 是设置一组样式，属性必须加引号，值如果是数字可以不用跟单位和引号$(this).css(&quot;color&quot;,&quot;red&quot;);//3. 参数可以是对象形式， 方便设置多组样式。属性名和属性值用冒号隔开， 属性可以不用加引号$(this).css({ &quot;color&quot;:&quot;white&quot;, &quot;font-size&quot;:&quot;20px&quot;}); 设置类样式方法addClass(&quot;类名&quot;);：添加类 removeClass(&quot;类名&quot;);：移除类 toggleClass(&quot;类名&quot;);：切换类 jQuery效果jQuery封装了很多动画效果 显示隐藏1show([speed,[easing],[fn]]) 1hide([speed,[easing],[fn]]) 1toggle([speed,[easing],[fn]]) 参数： 参数都可以省略， 无动画直接显示。 speed：三种预定速度之一的字符串(“slow” ,“normal” , or “fast” )或表示动画时长的毫秒数值(如： 1000)。 easing： (Optional) 用来指定切换效果， 默认是“swing”， 可用参数“linear”。 fn: 回调函数，在动画完成时执行的函数，每个元素执行一次。 滑动效果1slideDown([speed,[easing],[fn]]) 1slideUp([speed,[easing],[fn]]) 1slideToggle([speed,[easing],[fn]]) 事件切换1234hover([over,]out)$(&quot;.nav&gt;li&quot;).hover(function(){ $(this).children(&quot;ul&quot;).slideToggle();}) 参数： over:鼠标移到元素上要触发的函数（相当于mouseenter） out:鼠标移出元素要触发的函数（相当于mouseleave） 如果只写一个函数，则鼠标经过和离开都会触发它 动画队列 动画或者效果触发就会执行，如果多次触发就会造成多个动画或者效果排队执行。 stop()停止排队 只需要在动画方法前添加stop()即可解决动画排队问题 淡入淡出效果淡入 1fadeIn([speed,[easing],[fn]]) 淡出 1fadeIn([speed,[easing],[fn]]) 切换 1fadeIn([speed,[easing],[fn]]) 更换透明度 12//speed和opacity必写fadeTo([speed,opacity,[easing],[fn]]) 参数：opacity：透明度，取值[0-1] 自定义动画1animate(params,[speed],[easing],[fn]) 参数： params: 想要更改的样式属性，以对象形式传递，必须写。 属性名可以不用带引号， 如果是复合属性则需要采用驼峰峰命名法 borderLeft。 其余参数都可以省略。 speed：三种预定速度之一的字符串(“slow” ,“normal” , or “fast” )或表示动画时长的毫秒数值(如： 1000)。 easing： (Optional) 用来指定切换效果， 默认是“swing”， 可用参数“linear”。 fn: 回调函数，在动画完成时执行的函数，每个元素执行一次 jQuery属性操作 所谓元素固有属性就是元素本身自带的属性，比如&lt;a元素里面的href，比如&lt;input元素里面的type。 用户自己给元素添加的属性， 我们称为自定义属性。 比如给 div 添加 index =“1” 。 获取属性： prop(&quot;属性&quot;) 或attr(&quot;属性&quot;) 修改属性： prop(&quot;属性&quot;,&quot;属性值&quot;) 或 attr(&quot;属性&quot;) prop()只能获取元素的固有属性，而attr()能获取自定义属性，以及H5自定义属性。 数据缓存data()data() 方法可以在指定的元素上存取数据，并不会修改 DOM 元素结构。一旦页面刷新，之前存放的数据都将被移除。 12data(&quot;name&quot;,&quot;value&quot;) // 向被选元素附加数据date(&quot;name&quot;) // 向被选元素获取数据 同时，还可以读取 HTML5 自定义属性 data-index ，得到的是数字型 jQuery文本内容普通元素内容 html() 获取元素的内容 html(&quot;内容&quot;) 设置元素的内容 普通元素文本内容 text() 获取文本内容（忽略标签） 获取设置表单值 val() 获取表单值 val(&quot;设置值&quot;) 修改表单值 jQuery元素操作 主要是遍历、创建、添加、删除元素 遍历元素jQuery 隐式迭代是对同一类元素做了相同的操作。如果想要给同一类元素做不同操作，就需要用大遍历。 用法一： 123$(&quot;div&quot;).each(function(index,domEle){...;}) each() 方法遍历匹配的每一个元素。主要用DOM处理。 each 每一个 里面的回调函数有2个参数： index 是每个元素的索引号; demEle 是每个DOM元素对象，不是jquery对象所以要想使用jquery方法，需要给这个dom元素转换为jquery对象 $(domEle) 用法二：.$each()方法遍历元素，主要用于遍历数据、处理数据 12345678910111213141516//1.遍历元素$.each(&quot;div&quot;,function(i,ele){...;//i是标签 ele是标签内文本})//2.遍历数组var arr=[&quot;red&quot; ,&quot;blue&quot;,&quot;pink&quot;]$.each(arr,function(index,domEle){...;})//3.遍历对象$.each({name:&quot;张三&quot;， age：18},function(index,domEle){...;//i是属性名 ele是属性值}) 创建元素$(&quot;&lt;li&gt;&lt;li&gt;&quot;)动态创建了一个li 添加元素1.内部添加element.append(&quot;内容&quot;)把内容放入匹配元素内部最后面，类似原生appendChild element.prepend(&quot;内容&quot;) 把内容放入匹配元素内部最前面 2.外部添加element.after(''内容'') 把内容放入目标元素后面 element.before(''内容'') 把内容放入目标元素前面 ① 内部添加元素，生成之后，它们是父子关系。 ② 外部添加元素，生成之后，他们是兄弟关系。 删除元素element.remove() 删除匹配元素（本身） element.empty() 删除匹配的元素集合中所有的子节点 element.html(&quot;&quot;)清空匹配的元素内容 ① remove 删除元素本身。 ② empt() 和 html(‘’’’) 作用等价，都可以删除元素里面的内容，只不过 html 还可以设置内容。 jQuery尺寸、位置操作尺寸width()/height() 获取匹配元素宽度和高度值 只算width/height innerWidth()/innerHeight() 获取匹配元素宽度和高度值 包括padding outerWidth()/outerHeight() 获取匹配元素宽度和高度值 包括padding、borde outerWidth(true)/outerHeight(true) 获取匹配元素宽度和高度值 包括padding、borde、margin 以上参数为空，则是获取相应值，返回的是数字型。 如果参数为数字，则是修改相应值。 参数可以不必写单位。 位置 offset() 设置或获取元素偏移 offset() 方法设置或返回被选元素相对于文档的偏移坐标，跟父级没有关系。 该方法有2个属性 left、 top 。 offset().top 用于获取距离文档顶部的距离， offset().left 用于获取距离文档左侧的距离。 可以设置元素的偏移： offset({ top: 10, left: 30 }); position() 获取元素偏移 position() 方法用于返回被选元素相对于带有定位的父级偏移坐标，如果父级都没有定位，则以文档为准。 ② 该方法有2个属性 left、 top。 position().top 用于获取距离定位父级顶部的距离， position().left 用于获取距离定 位父级左侧的距离。 ③ 该方法只能获取。 scrollTop()/scrollLeft() 设置或获取元素被卷去的头部和左侧 scrollTop() 方法设置或返回被选元素被卷去的头部。 不跟参数是获取，参数为不带单位的数字则是设置被卷去的头部。 互斥锁jQuery事件事件处理on()绑定事件on() 方法优势1：在匹配元素上绑定一个或多个事件的处理函数 1element.on(events,[selector],fn) events:一个或多个用空格分隔的事件类型，如”click”或”keydown” 。 selector: 元素的子元素选择器 。 fn:回调函数 即绑定在元素身上的侦听函数。 123456789101112131415161718//多个事件不同操作 $(&quot;div&quot;).on({ mouseenter: function () { $(this).css(&quot;background&quot;, &quot;skyblue&quot;) }, click:function () { $(this).css(&quot;background&quot;, &quot;red&quot;) }, mouseleave: function () { $(this).css(&quot;background&quot;, &quot;pink&quot;) }, }) //多个事件同一操作 $(&quot;div&quot;).on(&quot;mouseenter mouseleave&quot;, function () { $(this).toggleClass(&quot;current&quot;) }); on()方法优势2：可以实现事件委派（事件委派就是把原来加给子元素身上的事件绑定在父元素身上，把事件委派给父元素） 123$(&quot;ul&quot;).on(&quot;click&quot;,&quot;li&quot;,function(){alert(11;)}) 在此之前有bind()，live()，delegate()等方法来处理或者委派事件，新版本推荐使用on()方法代替。 on()方法优势3：动态创建的元素click()没有办法绑定事件，on()可以给动态生成的元素绑定事件。 12345$(&quot;ol&quot;).on(&quot;click&quot;,&quot;li&quot;,function () { alert(22); }) var li = $(&quot;&lt;li&gt;我是后来追加的小li&lt;/li&gt;&quot;); $(&quot;ol&quot;).append(li) off()解绑事件off() 方法可以移除通过 on() 方法添加的事件处理程序。 123$(&quot;p&quot;).off() // 解绑p元素所有事件处理程序$(&quot;p&quot;).off( &quot;click&quot;) // 解绑p元素上面的点击事件 后面的 foo 是侦听函数名$(&quot;ul&quot;).off(&quot;click&quot;, &quot;li&quot;); // 解绑事件委托 如果有的事件只想触发一次， 可以使用 one() 来绑定事件。 trigger()自动触发事件有些事件希望自动触发, 比如轮播图自动播放功能跟点击右侧按钮一致。可以利用定时器自动触发右侧按钮点击事件，不必鼠标点击触发。 1234567891011121314//1.div触发点击事件$(&quot;div&quot;).click(function({ alert(&quot;hello world&quot;);}));//2.自动触发div点击事件$(&quot;div&quot;).on(&quot;click&quot;,function({ alert(&quot;hello world&quot;);});$(&quot;div&quot;).trigger(&quot;click&quot;);//3.triggerHandler() 不会触发元素的默认行为，例如焦点表单中不会有光标产生$(&quot;input&quot;).on(&quot;focus&quot;,function(){ $(this).val(&quot;你好&quot;);});$(&quot;input&quot;).triggerHandler(&quot;focus&quot;); 事件对象只要有事件触发就会有事件对象的产生 阻止默认行为： event.preventDefault() 或者 return false阻止冒泡： event.stopPropagation() even其他方法toFixed(n) 保留n位小数 $.extend([deep], target, object1, [objectN]) 拷贝对象 deep: 如果设为true 为深拷贝， 默认为false 浅拷贝 浅拷贝，是把被拷贝的对象复杂数据类型中的地址拷贝给目标对象，修改目标对象会影响被拷贝对象。 深拷贝，前面加true， 完全克隆(拷贝的对象,而不是地址)，修改目标对象不会影响被拷贝对象。 target: 要拷贝的目标对象 object1:待拷贝到第一个对象的对象。 objectN:待拷贝到第N个对象的对象。 多库共存jQuery使用$作为标示符， 随着jQuery的流行,其他 js 库也会用这$作为标识符， 这样一起使用会引起冲突。 $.noConflict() ：jQuery 变量规定新的名称 12var suibian=jQuery.noConfilect();suibian(&quot;div&quot;) Jquery插件网站 jQuery 插件库 http://www.jq22.com/ jQuery之家 http://www.htmleaf.com/","link":"/2022/07/11/JQuery%E7%AC%94%E8%AE%B0/"},{"title":"hexo笔记","text":"","link":"/2022/02/23/hexo%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"js","slug":"js","link":"/tags/js/"}],"categories":[],"pages":[]}